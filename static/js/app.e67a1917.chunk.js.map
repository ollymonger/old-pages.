{"version":3,"sources":["src/clientReducer.ts","src/store.ts","src/languageSelect.tsx","src/clientTab.tsx","App.tsx"],"names":["clientSlice","createSlice","name","initialState","device","lang","reducers","setClient","state","result","UAParser","getResult","type","setLanguage","action","payload","toLowerCase","getLanguage","actions","store","configureStore","reducer","client","clientReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","LanguageSelect","React","useState","visible","setVisible","dispatch","View","Menu","onDismiss","anchor","Button","onPress","Text","style","styles","headerTextColor","Item","title","Divider","ClientTab","useEffect","header","navLeft","to","navRight","right","bottom","welcomeMsg","text","App","useFonts","Inter_900Black","app","exact","path","element","console","log","container","fontFamily","color","fontSize","StyleSheet","create","flex","backgroundColor","height","maxHeight","paddingLeft","paddingTop","paddingRight","flexDirection","justifyContent","alignSelf"],"mappings":"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","file":"static/js/app.e67a1917.chunk.js","sourcesContent":["import { RootState } from './store';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { UAParser } from 'ua-parser-js';\r\n\r\nexport interface clientState {\r\n    device: string;\r\n    lang: string;\r\n}\r\n\r\nconst initialState: clientState = {\r\n    device: 'null',\r\n    lang: 'english'\r\n}\r\n\r\nexport const clientSlice = createSlice({\r\n    name: 'client',\r\n    initialState,\r\n    reducers: {\r\n        setClient: (state) => {\r\n            let parser = new UAParser();\r\n            let result = parser.getResult();\r\n            state.device = result.device.type ? result.device.type : 'web';\r\n        },\r\n        setLanguage: (state, action: PayloadAction<string>) => {\r\n            action.payload.toLowerCase() === 'english' ? state.lang = 'english' : state.lang = 'french';\r\n        },\r\n        getLanguage: (state) => {\r\n            state.lang;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setClient, setLanguage, getLanguage } = clientSlice.actions;\r\nexport const getClient = (state: clientState) => state;\r\n\r\nexport default clientSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport clientReducer from './clientReducer';\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        client: clientReducer\r\n    }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React, { useEffect } from \"react\";\r\nimport { View, Text } from \"react-native\";\r\nimport { styles } from \"../App\";\r\nimport { setClient, setLanguage } from \"./clientReducer\";\r\nimport { useAppDispatch, useAppSelector } from \"./store\";\r\nimport { Route, Link } from 'react-router-native';\r\nimport { Button, Menu, Divider, Provider } from 'react-native-paper';\r\n\r\nexport const LanguageSelect = () => {\r\n    const [visible, setVisible] = React.useState(false);\r\n    const closeMenu = () => setVisible(false);\r\n    const openMenu = () => setVisible(true);\r\n\r\n    const dispatch = useAppDispatch();\r\n    const client = useAppSelector(state => state.client);\r\n\r\n    return (\r\n        <View>\r\n            <Menu visible={visible} onDismiss={closeMenu} anchor={<Button onPress={openMenu}>\r\n                <Text style={styles.headerTextColor}>LANG</Text>\r\n            </Button>}>\r\n                <Menu.Item onPress={() => { dispatch(setLanguage(\"english\")) }} title=\"English\" />\r\n                <Divider />\r\n                <Menu.Item onPress={() => { dispatch(setLanguage(\"french\")) }} title=\"Item2\" />\r\n                <Divider />\r\n                <Menu.Item onPress={() => { dispatch(setLanguage(\"german\")) }} title=\"Item2\" />\r\n                <Divider />\r\n                <Menu.Item onPress={() => { dispatch(setLanguage(\"japanese\")) }} title=\"Item2\" />\r\n            </Menu>\r\n        </View>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\nimport { styles } from \"../App\";\r\nimport { setClient } from \"./clientReducer\";\r\nimport { useAppDispatch, useAppSelector } from \"./store\";\r\nimport { Route, Link } from 'react-router-native';\r\nimport { LanguageSelect } from \"./languageSelect\";\r\n\r\n\r\nexport const ClientTab = () => {\r\n    let client = useAppSelector(state => state.client)\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setClient());\r\n    });\r\n\r\n    return (\r\n        < View style={styles.header} >\r\n            <View style={styles.navLeft}>\r\n                <Link to=\"/\"><Text style={styles.headerTextColor}>yllo.cc</Text></Link>\r\n            </View>\r\n            <View style={styles.navRight}>\r\n                <Link to=\"/projects\">\r\n                    <View style={{ right: '50%' }}>\r\n                        <Text style={styles.headerTextColor}>PROJECTS</Text>\r\n                    </View>\r\n                </Link>\r\n                <Link to=\"/contact\">\r\n                    <View>\r\n                        <Text style={styles.headerTextColor}>CONTACT</Text>\r\n                    </View>\r\n                </Link>\r\n                <View style={{ bottom: '25%' }}>\r\n                    <LanguageSelect />\r\n                </View>\r\n            </View>\r\n        </View >\r\n    )\r\n}\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect } from 'react';\r\nimport { ImageBackground, StyleSheet, Text, View, Image } from 'react-native';\r\nimport { Provider } from 'react-redux';\r\nimport { clientState, getClient, getLanguage, setClient } from './src/clientReducer';\r\nimport { ClientTab } from './src/clientTab';\r\nimport { store, useAppDispatch, useAppSelector } from './src/store';\r\nimport { Link, NativeRouter, Route, Routes } from 'react-router-native';\r\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\r\nimport { Provider as PaperProvider } from 'react-native-paper';\r\n\r\nconst welcomeMsg: {} = [{ lang: \"english\", text: \"Welcome\" }, { lang: \"french\", text: \"Bonjour\" }, { lang: \"spanish\", text: \"Bienvenido\" }, { lang: \"german\", text: \"Willkommen\" },\r\n{ lang: \"italian\", text: \"Benvenuto\" }, { lang: \"japanese\", text: \"ようこそ\" }, { lang: \"korean\", text: \"환영합니다\" }, { lang: \"chinese\", text: \"欢迎\" }, { lang: \"russian\", text: \"Добро пожаловать\" }];\r\n\r\nconst WebHome = (client) => {\r\n  console.log(client);\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={{ fontFamily: 'Inter_900Black', color: '#F7F7FF', fontSize: '400%' }}>{\r\n        client.lang === \"english\" ? welcomeMsg[0].text : 'not english!'\r\n      }</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  let [fontsLoaded] = useFonts({\r\n    Inter_900Black\r\n  });\r\n  return (\r\n    <NativeRouter>\r\n      <Provider store={store}>\r\n        <PaperProvider>\r\n          <View style={styles.app}>\r\n            <View style={styles.header}>\r\n              <ClientTab />\r\n            </View>\r\n            <Routes>\r\n              <Route exact path=\"/\" element={\r\n                WebHome(\"english\")\r\n              } />\r\n            </Routes>\r\n          </View>\r\n        </PaperProvider>\r\n      </Provider>\r\n    </NativeRouter>\r\n  );\r\n}\r\n\r\nexport const styles = StyleSheet.create({\r\n  app: {\r\n    flex: 1,\r\n    backgroundColor: '#340580',\r\n    color: '#fff',\r\n    height: '100%'\r\n  },\r\n  header: {\r\n    flex: 2,\r\n    maxHeight: '7%',\r\n    paddingLeft: '5%',\r\n    paddingTop: '2%',\r\n    paddingRight: '5%',\r\n  },\r\n  headerTextColor: {\r\n    color: '#F7F7FF',\r\n    fontFamily: 'Inter_900Black'\r\n  },\r\n  navLeft: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'flex-start',\r\n    color: '#F7F7FF'\r\n  },\r\n  navRight: {\r\n    bottom: '20px',\r\n    flexDirection: 'row',\r\n    justifyContent: 'flex-end',\r\n    color: '#F7F7FF'\r\n  },\r\n  container: {\r\n    flex: 2,\r\n    paddingLeft: '10%',\r\n    paddingTop: '10%',\r\n    paddingRight: '10%',\r\n    alignSelf: 'center'\r\n  }\r\n});\r\n"],"sourceRoot":""}
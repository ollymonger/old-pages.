{"version":3,"sources":["src/clientReducer.ts","src/store.ts","src/Header.tsx","App.tsx"],"names":["clientSlice","createSlice","name","initialState","device","reducers","setClient","state","Platform","OS","actions","store","configureStore","reducer","client","clientReducer","useAppSelector","useSelector","Header","dispatch","useDispatch","useEffect","View","style","styles","header","App","StyleSheet","create","flex","flexDirection","backgroundColor","maxHeight"],"mappings":"mNAYaA,EAAcC,YAAY,CACnCC,KAAM,SACNC,aAN8B,CAC9BC,OAAQ,QAMRC,SAAU,CACNC,UAAW,SAACC,GACRA,EAAMH,OAASI,IAASC,GAAI,OAKzBH,EAAcN,EAAYU,QAA1BJ,UAGAN,IAAf,QCpBaW,EAAQC,YAAe,CAChCC,QAAS,CACLC,OAAQC,KAOHC,EAAkDC,ICRlDC,EAAS,WAClB,IAAIJ,EAASE,GAAe,SAAAT,GAAK,OAAIA,EAAMO,UACrCK,EDK0BC,cCChC,OAJAC,qBAAU,WACNF,EAASb,QAIT,kBAACgB,EAAA,EAAD,CAAMC,MAAOC,EAAOC,QACfX,EAAOV,SCNL,SAASsB,IAGtB,OACE,kBAAC,IAAD,CAAUf,MAAOA,GACf,kBAACW,EAAA,EAAD,CAAMC,MAAOC,EAAOC,QAClB,kBAAC,EAAD,QAMD,IAAMD,EAASG,IAAWC,OAAO,CACtCH,OAAQ,CACNI,KAAM,EACNC,cAAe,MACfC,gBAAiB,MACjBC,UAAW,S","file":"static/js/app.7973988c.chunk.js","sourcesContent":["import { RootState } from './store';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Platform } from 'react-native';\r\n\r\ninterface clientState {\r\n    device: string;\r\n}\r\n\r\nconst initialState: clientState = {\r\n    device: 'null'\r\n}\r\n\r\nexport const clientSlice = createSlice({\r\n    name: 'client',\r\n    initialState,\r\n    reducers: {\r\n        setClient: (state) => {\r\n            state.device = Platform.OS +\"\";\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setClient } = clientSlice.actions;\r\nexport const getClient = (state: clientState) => state.device;\r\n\r\nexport default clientSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport clientReducer from './clientReducer';\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        client: clientReducer\r\n    }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React, { useEffect } from \"react\";\r\nimport { View, Text } from \"react-native\";\r\nimport { styles } from \"../App\";\r\nimport { setClient } from \"./clientReducer\";\r\nimport { useAppDispatch, useAppSelector } from \"./store\";\r\n\r\nexport const Header = () => {\r\n    let client = useAppSelector(state => state.client)\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setClient());\r\n    })\r\n\r\n    return (\r\n        <View style={styles.header}>\r\n            {client.device}\r\n        </View>\r\n    )\r\n}\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect } from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { Provider } from 'react-redux';\r\nimport { setClient } from './src/clientReducer';\r\nimport { Header } from './src/Header'\r\nimport { store, useAppDispatch, useAppSelector } from './src/store';\r\n\r\n\r\n\r\nexport default function App() {\r\n\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <View style={styles.header}>\r\n        <Header />\r\n      </View>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport const styles = StyleSheet.create({\r\n  header: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    backgroundColor: 'red',\r\n    maxHeight: '7%'\r\n  }\r\n});\r\n"],"sourceRoot":""}
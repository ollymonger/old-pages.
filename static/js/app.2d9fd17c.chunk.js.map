{"version":3,"sources":["src/redux/clientReducer.ts","src/redux/store.ts","src/components/MobileHeader.tsx","src/components/WebHeader.tsx","src/clientTab.tsx","src/components/Home.tsx","App.tsx"],"names":["clientSlice","createSlice","name","initialState","device","lang","reducers","setClient","state","result","UAParser","getResult","type","setLanguage","window","navigator","language","indexOf","substring","getLanguage","actions","store","configureStore","reducer","client","clientReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","MobileHeader","React","useState","open","setOpen","closeMenu","navigate","useNavigate","View","style","styles","header","navLeft","Text","headerTextColor","navRight","Menu","visible","onDismiss","anchor","Button","onPress","color","title","Item","replace","Divider","WebHeader","to","right","ClientTab","dispatch","useEffect","welcomeMsg","text","Home","container","fontFamily","fontSize","map","msg","MobHome","WebHome","App","useFonts","Inter_900Black","app","exact","path","element","StyleSheet","create","flex","backgroundColor","height","maxHeight","paddingLeft","paddingTop","paddingRight","flexDirection","justifyContent","bottom","alignSelf"],"mappings":"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","file":"static/js/app.2d9fd17c.chunk.js","sourcesContent":["import { RootState } from './store';\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { UAParser } from 'ua-parser-js';\r\n\r\nexport interface clientState {\r\n    device: string;\r\n    lang: string;\r\n}\r\n\r\nconst initialState: clientState = {\r\n    device: 'null',\r\n    lang: 'en'\r\n}\r\n\r\nexport const clientSlice = createSlice({\r\n    name: 'client',\r\n    initialState,\r\n    reducers: {\r\n        setClient: (state) => {\r\n            let parser = new UAParser();\r\n            let result = parser.getResult();\r\n            state.device = result.device.type ? result.device.type : 'web';\r\n        },\r\n        setLanguage: (state) => {\r\n            if(window.navigator.language.indexOf('-') > 0){\r\n                // set state to only be first two characters of window.navigator.language\r\n                state.lang = window.navigator.language.substring(0, 2);\r\n            }\r\n            else{\r\n                state.lang = window.navigator.language;\r\n            }\r\n        },\r\n        getLanguage: (state) => {\r\n            state.lang;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setClient, setLanguage, getLanguage } = clientSlice.actions;\r\nexport const getClient = (state: clientState) => state;\r\n\r\nexport default clientSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport clientReducer from './clientReducer';\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        client: clientReducer\r\n    }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React, { useEffect } from \"react\";\r\nimport { View, Text, Button, Linking } from \"react-native\";\r\nimport { Divider, Menu } from \"react-native-paper\";\r\nimport { Route, Link, Navigate, useNavigate } from 'react-router-native';\r\n\r\nimport { styles } from \"../../App\";\r\nimport { setClient, setLanguage } from \"../redux/clientReducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../redux/store\";\r\n\r\nexport const MobileHeader = () => {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const openMenu = () => setOpen(true);\r\n    const closeMenu = () => setOpen(false);\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <View style={styles.header}>\r\n            <View style={styles.navLeft}>\r\n                <Text style={styles.headerTextColor}>yllo.cc</Text>\r\n            </View>\r\n            <View style={styles.navRight}>\r\n                <Menu visible={open} onDismiss={closeMenu} anchor={<Button onPress={openMenu} color=\"#B084CC\" title=\"Menu\"/>}>\r\n                    <Menu.Item onPress={() => { navigate('/', { replace: true }); closeMenu(); }} title=\"Home\"></Menu.Item>\r\n                    <Divider />\r\n                    <Menu.Item onPress={() => { navigate('/projects', { replace: true }); closeMenu(); }} title=\"Projects\" />\r\n                    <Divider />\r\n                    <Menu.Item onPress={() => { navigate('/contact', { replace: true }); closeMenu(); }} title=\"Contact\" />\r\n                </Menu>\r\n            </View>\r\n        </View>\r\n    )\r\n}","import React, { useEffect } from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\nimport { styles } from \"../../App\";\r\nimport { Route, Link } from 'react-router-native';\r\n\r\n\r\nexport const WebHeader = () => {\r\n    return (\r\n\r\n        <View style={styles.header} >\r\n            <View style={styles.navLeft}>\r\n                <Link to=\"/\"><Text style={styles.headerTextColor}>yllo.cc</Text></Link>\r\n            </View>\r\n            <View style={styles.navRight}>\r\n                <Link to=\"/projects\">\r\n                    <View style={{ right: '50%' }}>\r\n                        <Text style={styles.headerTextColor}>PROJECTS</Text>\r\n                    </View>\r\n                </Link>\r\n                <Link to=\"/contact\">\r\n                    <View>\r\n                        <Text style={styles.headerTextColor}>CONTACT</Text>\r\n                    </View>\r\n                </Link>\r\n            </View>\r\n        </View >\r\n    )\r\n}","import React, { useEffect } from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\nimport { styles } from \"../App\";\r\nimport { setClient, setLanguage } from \"./redux/clientReducer\";\r\nimport { useAppDispatch, useAppSelector } from \"./redux/store\";\r\nimport { Route, Link } from 'react-router-native';\r\nimport { MobileHeader } from \"./components/MobileHeader\";\r\nimport { WebHeader } from \"./components/WebHeader\";\r\n\r\n\r\nexport const ClientTab = () => {\r\n    let client = useAppSelector(state => state.client)\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setClient());\r\n        dispatch(setLanguage());\r\n    });\r\n\r\n    if(client.device === \"mobile\"){\r\n        return <MobileHeader/>\r\n    } else {\r\n        return <WebHeader/>\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { View, Text } from \"react-native\";\r\nimport { styles } from \"../../App\";\r\nimport { clientState } from \"../redux/clientReducer\";\r\nimport { useAppDispatch, useAppSelector } from \"../redux/store\";\r\n\r\nconst welcomeMsg = [{ lang: \"en\", text: \"Welcome\" }, { lang: \"fr\", text: \"Bonjour\" }, { lang: \"es\", text: \"Bienvenido\" }, { lang: \"de\", text: \"Willkommen\" },\r\n{ lang: \"it\", text: \"Benvenuto\" }, { lang: \"ja\", text: \"ようこそ\" },\r\n{ lang: \"ko\", text: \"환영합니다\" }, { lang: \"zh\", text: \"欢迎\" },\r\n { lang: \"ru\", text: \"Добро пожаловать\" }];\r\n\r\nconst WebHome = (client: clientState) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={{ fontFamily: 'Inter_900Black', color: '#F7F7FF', fontSize: '400%' }}>{\r\n        welcomeMsg.map(msg => { if(msg.lang === client.lang) { return msg.text }})}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst MobHome = (client: clientState) => {\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={{ fontFamily: 'Inter_900Black', color: '#F7F7FF', fontSize: '300%' }}>{\r\n        welcomeMsg.map(msg => { if(msg.lang === client.lang) { return msg.text }})}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport const Home = () => {\r\n    const dispatch = useAppDispatch();\r\n    const client: clientState = useAppSelector(state => state.client);\r\n    if(client.device == \"mobile\") return MobHome(client);\r\n    else return WebHome(client);\r\n}","import { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect } from 'react';\r\nimport { ImageBackground, StyleSheet, Text, View, Image } from 'react-native';\r\nimport { Provider } from 'react-redux';\r\nimport { ClientTab } from './src/clientTab';\r\nimport { store } from './src/redux/store';\r\nimport { Link, NativeRouter, Route, Routes } from 'react-router-native';\r\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\r\nimport { Provider as PaperProvider } from 'react-native-paper';\r\nimport { Home } from './src/components/Home';\r\n\r\n\r\nexport default function App() {\r\n  let [fontsLoaded] = useFonts({\r\n    Inter_900Black\r\n  });\r\n  return (\r\n    <NativeRouter>\r\n      <Provider store={store}>\r\n        <PaperProvider>\r\n          <View style={styles.app}>\r\n            <View style={styles.header}>\r\n              <ClientTab />\r\n            </View>\r\n            <Routes>\r\n              <Route exact path=\"/\" element={\r\n                <Home/>\r\n              } />\r\n            </Routes>\r\n          </View>\r\n        </PaperProvider>\r\n      </Provider>\r\n    </NativeRouter>\r\n  );\r\n}\r\n\r\nexport const styles = StyleSheet.create({\r\n  app: {\r\n    flex: 1,\r\n    backgroundColor: '#340580',\r\n    color: '#fff',\r\n    height: '100%'\r\n  },\r\n  header: {\r\n    flex: 2,\r\n    maxHeight: '7%',\r\n    paddingLeft: '5%',\r\n    paddingTop: '2%',\r\n    paddingRight: '5%',\r\n  },\r\n  headerTextColor: {\r\n    color: '#F7F7FF',\r\n    fontFamily: 'Inter_900Black'\r\n  },\r\n  navLeft: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'flex-start',\r\n    color: '#F7F7FF'\r\n  },\r\n  navRight: {\r\n    bottom: '20px',\r\n    flexDirection: 'row',\r\n    justifyContent: 'flex-end',\r\n    color: '#F7F7FF'\r\n  },\r\n  container: {\r\n    flex: 2,\r\n    paddingLeft: '10%',\r\n    paddingTop: '10%',\r\n    paddingRight: '10%',\r\n    alignSelf: 'center'\r\n  }\r\n});\r\n"],"sourceRoot":""}